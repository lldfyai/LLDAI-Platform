{
    "problem_id": "1",
    "lang": "JAVA",
    "files_metadata": {
        "test_input.txt": "3\n2\nAlice\nBob\n1 1\n1 2\n2 2\n3 1\n2 1\n1 3\n3 2\n2 3\n3 3\nexit\n\n4\n3\nDavid\nEva\nFrank\n1 1\n1 1\n2 2\nexit\n\n5\n2\nLuke\nMark\n4 5\nexit\n\n3\n2\nJohn\nDoe\nexit",
        "expected_output.txt": "X - -\n- - -\n- - -\nX O -\n- - -\n- - -\nX O -\n- X -\n- - -\nX O -\n- X -\nO - -\nX O -\nX X -\nO - -\nX O O\nX X -\nO - -\nX O O\nX X -\nO X -\nX O O\nX X O\nO X -\nX O O\nX X O\nO X X\nBob won the game\nGame Over\n\nX - - -\n- - - -\n- - - -\n- - - -\nInvalid Move\nX - - -\n- O - -\n- - - -\n- - - -\nGame Over\n\n- - - - -\n- - - - -\n- - - - -\n- - - - X\n- - - - -\nGame Over\n\nGame Over",
        "OutputComparator.java": "import java.util.Iterator;\nimport java.util.Properties;\n\npublic class OutputComparator {\n  public static boolean compareOutputs(int testCaseNum, String actualOutput, Iterator<String> expectedIterator, Properties resultsProps) {\n    StringBuilder expectedOutput = new StringBuilder();\n    String line;\n\n    while (expectedIterator.hasNext() && !(line = expectedIterator.next()).isEmpty()) {\n      expectedOutput.append(line).append(\"\\n\");\n    }\n    String expectedOutputString = expectedOutput.toString().trim();\n    if (expectedOutputString.equals(actualOutput)) {\n      return true;\n    } else {\n      resultsProps.setProperty(\"actualOutput\", actualOutput);\n      resultsProps.setProperty(\"expectedOutput\", expectedOutputString);\n      return false;\n    }\n  }\n}",
        "Player.java": "public class Player {\n    private final String name;\n    private final char piece;\n\n    public Player(String name, char piece) {\n        this.name = name;\n        this.piece = piece;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public char getPiece() {\n        return piece;\n    }\n}",
        "Game.java": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Game {\n    private final List<Player> players;\n    private int currentPlayerIndex;\n    private final Board board;\n\n    public Game(int boardSize, List<String> playerNames) {\n        this.players = new ArrayList<>();\n        char[] pieces = {'X', 'O', 'A', 'B', 'C', 'D'}; // Add more pieces if needed\n        for (int i = 0; i < playerNames.size(); i++) {\n            players.add(new Player(playerNames.get(i), pieces[i]));\n        }\n        this.currentPlayerIndex = 0;\n        this.board = new Board(boardSize);\n    }\n\n    public boolean makeMove(int row, int col) {\n        if (row <= 0 || row > board.getSize() || col <= 0 || col > board.getSize()) {\n            System.out.println(\"Invalid Move\");\n            return false;\n        }\n        if (board.isCellEmpty(row, col)) {\n            board.placePiece(row, col, players.get(currentPlayerIndex).getPiece());\n            switchPlayer();\n            return true;\n        }\n        return false;\n    }\n\n    private void switchPlayer() {\n        currentPlayerIndex = (currentPlayerIndex + 1) % players.size();\n    }\n\n    public boolean checkWin() {\n        return board.checkWin();\n    }\n\n    public boolean isBoardFull() {\n        return board.isFull();\n    }\n\n    public void printBoard() {\n        board.print();\n    }\n\n    public String getCurrentPlayerName() {\n        return players.get(currentPlayerIndex).getName();\n    }\n}",
        "Main.java": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n  public static void main(String[] args) throws IOException {\n    String outputDir = \"output\";\n    File outputDirectory = new File(outputDir);\n    if (!outputDirectory.exists()) {\n      outputDirectory.mkdirs(); // Create the directory if it doesn't exist\n    }\n\n    File outputFile = new File(outputDir + \"/stdout.txt\");\n    PrintStream originalOut = new PrintStream(outputFile);\n    PrintStream console = System.out;\n    System.setOut(originalOut);\n\n    File errorFile = new File(outputDir + \"/stderr.txt\");\n    PrintStream errorStream = new PrintStream(errorFile);\n\n    File resultsFile = new File(outputDir + \"/results.properties\");\n    Properties resultsProps = new Properties();\n\n    try {\n\n      List<String> inputLines = readLines(\"test_input.txt\");\n      List<String> expectedLines = readLines(\"expected_output.txt\");\n\n      Iterator<String> inputIterator = inputLines.iterator();\n      Iterator<String> expectedIterator = expectedLines.iterator();\n\n      int testCaseNum = 1;\n      \n      int totalTestCases = countTestCases(inputLines);\n\n\n      long startTime = System.currentTimeMillis(); // Start time\n\n      while (inputIterator.hasNext()) {\n        // Read board size and number of players\n        int boardSize = Integer.parseInt(inputIterator.next().trim());\n        int numPlayers = Integer.parseInt(inputIterator.next().trim());\n\n        // Read player names\n        List<String> playerNames = new ArrayList<>();\n        for (int i = 0; i < numPlayers; i++) {\n          playerNames.add(inputIterator.next().trim());\n        }\n\n        // Read moves\n        List<String> testCaseInput = new ArrayList<>();\n        String line;\n        while (inputIterator.hasNext() && !(line = inputIterator.next()).isEmpty()) {\n          testCaseInput.add(line);\n        }\n\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        PrintStream printStream = new PrintStream(outputStream);\n        System.setOut(printStream);\n\n        simulateTestCase(boardSize, numPlayers, playerNames, testCaseInput);\n\n        System.setOut(originalOut);\n\n        String actualOutput = outputStream.toString().trim();\n\n        // Use the OutputComparator for comparing the output\n        boolean result = OutputComparator.compareOutputs(testCaseNum, actualOutput, expectedIterator, resultsProps);\n\n        if (!result) {\n          resultsProps.setProperty(\"failedTestCaseNum\", String.valueOf(testCaseNum));\n          break;\n        }\n\n        testCaseNum++;\n        if (inputIterator.hasNext()) {\n          System.out.println();\n        }\n      }\n      if (!inputIterator.hasNext()) {\n        System.out.println(\"All test cases passed\");\n      }\n      long endTime = System.currentTimeMillis(); // End time\n      long executionTime = endTime - startTime; // Execution time\n\n      resultsProps.setProperty(\"totalTestCases\", String.valueOf(totalTestCases));\n      resultsProps.setProperty(\"testsPassed\", String.valueOf(testCaseNum-1));\n      resultsProps.setProperty(\"execTime\", String.valueOf(executionTime) + \"ms\");\n\n      try (FileOutputStream fos = new FileOutputStream(resultsFile)) {\n        resultsProps.store(fos, null);\n      } catch (IOException e) {\n        errorStream.println(e);\n      }\n\n    } catch (Exception e) {\n      errorStream.println(e);\n    }\n  }\n\n  private static void simulateTestCase(int boardSize, int numPlayers, List<String> playerNames, List<String> inputLines) {\n    Scanner scanner = new Scanner(String.join(\"\\n\", inputLines));\n    Game game = new Game(boardSize, playerNames);\n\n    boolean everMoved = false;        // Track if any move has been made\n    boolean printedAfterMove = false; // Ensure board prints only immediately after a valid move\n\n    while (scanner.hasNextLine()) {\n      String input = scanner.nextLine().trim();\n      if (input.equalsIgnoreCase(\"exit\")) {\n        break;\n      }\n\n      String[] parts = input.split(\" \");\n      if (parts.length != 2) {\n        System.out.println(\"Invalid Move\");\n        continue;\n      }\n\n      try {\n        int row = Integer.parseInt(parts[0]);\n        int col = Integer.parseInt(parts[1]);\n        if (game.makeMove(row, col)) {\n          game.printBoard();\n          everMoved = true;\n          printedAfterMove = true;\n\n          if (game.checkWin()) {\n            System.out.println(game.getCurrentPlayerName() + \" won the game\");\n            break;\n          }\n\n          if (game.isBoardFull()) {\n            System.out.println(\"Game Over\");\n            break;\n          }\n        } else {\n          System.out.println(\"Invalid Move\");\n        }\n      } catch (NumberFormatException e) {\n        System.out.println(\"Invalid Move\");\n      }\n    }\n\n    // Print the final game board state only if moves were made and last print wasn't immediately after a valid move\n    if (everMoved && !printedAfterMove) {\n      game.printBoard();\n    }\n\n    System.out.println(\"Game Over\");\n    scanner.close();\n  }\n\n  private static List<String> readLines(String filename) throws IOException {\n    BufferedReader reader = new BufferedReader(new FileReader(filename));\n    List<String> lines = new ArrayList<>();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      if (!line.trim().isEmpty() || line.isEmpty()) {\n        lines.add(line);\n      }\n    }\n    reader.close();\n    return lines;\n  }\n\n  private static int countTestCases(List<String> inputLines) {\n    int count = 1;\n    for (String line : inputLines) {\n      if (line.isEmpty()) {\n        count++;\n      }\n    }\n    return count;\n  }\n}",
        "Board.java": "public class Board {\n    private final int size;\n    private final char[][] grid;\n\n    public Board(int size) {\n        this.size = size;\n        this.grid = new char[size][size];\n        initializeBoard();\n    }\n\n    private void initializeBoard() {\n        for (int i = 0; i < size; i++) {\n            for (int j = 0; j < size; j++) {\n                grid[i][j] = '-';\n            }\n        }\n    }\n\n    public int getSize() {\n        return size;\n    }\n\n    public boolean isCellEmpty(int row, int col) {\n        return grid[row - 1][col - 1] == '-';\n    }\n\n    public void placePiece(int row, int col, char piece) {\n        grid[row - 1][col - 1] = piece;\n    }\n\n    public boolean checkWin() {\n        // Check rows and columns\n        for (int i = 0; i < size; i++) {\n            boolean rowWin = true;\n            boolean colWin = true;\n            char firstRow = grid[i][0];\n            char firstCol = grid[0][i];\n            if (firstRow == '-') rowWin = false;\n            if (firstCol == '-') colWin = false;\n            for (int j = 1; j < size && (rowWin || colWin); j++) {\n                if (grid[i][j] != firstRow) rowWin = false;\n                if (grid[j][i] != firstCol) colWin = false;\n            }\n            if (rowWin || colWin) return true;\n        }\n\n        // Check diagonals\n        boolean diag1Win = true;\n        boolean diag2Win = true;\n        char firstDiag1 = grid[0][0];\n        char firstDiag2 = grid[0][size - 1];\n        if (firstDiag1 == '-') diag1Win = false;\n        if (firstDiag2 == '-') diag2Win = false;\n        for (int i = 1; i < size && (diag1Win || diag2Win); i++) {\n            if (grid[i][i] != firstDiag1) diag1Win = false;\n            if (grid[i][size - 1 - i] != firstDiag2) diag2Win = false;\n        }\n        return diag1Win || diag2Win;\n    }\n\n    public boolean isFull() {\n        for (int i = 0; i < size; i++) {\n            for (int j = 0; j < size; j++) {\n                if (grid[i][j] == '-') {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    public void print() {\n        for (int i = 0; i < size; i++) {\n            for (int j = 0; j < size; j++) {\n                System.out.print(grid[i][j]);\n                if (j < size - 1) {\n                    System.out.print(\" \");\n                }\n            }\n            System.out.println();\n        }\n    }\n}"
    }
}