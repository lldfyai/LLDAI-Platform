scalar JSON

type Query {
    problems(userId: Int!): [Problem]
    problem(problemId: Int!): Problem
    githubUsernameEmail(input: GithubUsernameEmailInput!): GithubUserDetails!
    getSubmissionMetadata(problemId: Int!, userId: Int!): [SubmissionMetadata]!
}
type Mutation {
    register(input: RegisterInput!): AuthResponse
    login(input: LoginInput!): AuthResponse
    forgotPassword(email: String!): String!
    resetPassword(input: ResetPasswordInput!): String!
    submitCode(input: SubmissionInput!) : SubmissionMetadata
}

type Problem {
    problemId: Int
    problemTitle: String
    difficulty: String
    tags: [String]
    timeLimit: Float
    memoryLimit: Float
    s3Path: String
}

type AuthResponse {
    user: User!
    token: String!
    githubToken: String
}

type GithubUserDetails {
    githubToken: String!
    username: String!
    email: String!
    existing: Boolean!
}

input GithubUsernameEmailInput {
    githubCode: String!
}

input LoginInput {
    githubToken: String
    username: String
    email: String
    password: String!
}

input RegisterInput {
    githubToken: String
    username: String
    email: String
    password: String!
}

input ResetPasswordInput {
    email: String!
    confirmationCode: String!
    newPassword: String!
}

type Submission {
    id: ID!
    user_id: ID!
    problem_id: ID!
    result: String!
}

type User {
    username: String!
    email: String!
    problemsSolved: Int
    rank: Int
    userId: Int!
}
type SubmissionMetadata {
    submissionId: ID!
    problemId: Int!
    userId: Int!
    language: SupportedLanguagesEnum
    state: SubmissionStateEnum
    statusCode: Int
    testsPassed: Int
    totalTests: Int
    executionTime: Float
    memory: Float
    createdAt: String
}

input SubmissionInput {
    problemId : String!
    lang: SupportedLanguagesEnum
    filesMetadata : JSON!
}

enum SupportedLanguagesEnum {
    PYTHON,
    JAVA,
    C,
    CPP
}

enum SubmissionStateEnum {
    Received,
    Processing,
    Completed
}