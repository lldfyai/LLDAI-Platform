name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: fastapi-app
  ECS_CLUSTER: lldfyai_cluster
  ECS_SERVICE: lldfyManager1
  CONTAINER_NAME: lldai-container
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
  OAUTH2_CLIENT_SECRET: ${{ secrets.OAUTH2_CLIENT_SECRET}}
  OAUTH2_CLIENT_ID: ${{ secrets.OAUTH2_CLIENT_ID}}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD}}
  DB_USER: ${{ secrets.DB_USER}}
  DB_NAME: ${{ secrets.DB_NAME}}
  DB_HOST: ${{ secrets.DB_HOST}}
  USER_POOL_ID: ${{ secrets.USER_POOL_ID}}
  COGNITO_CLIENT_ID: ${{ secrets.CLIENT_ID}}
  COGNITO_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET}}
  SQLALCHEMY_DB_HOST: ${{ secrets.SQLALCHEMY_DB_HOST}}
jobs:
  pr-build:
    name: PR Build Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Check Syntax Errors
        run: python -m compileall .

  deploy:
    runs-on: ubuntu-latest
    needs: pr-build
    if: github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: ecr-login
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
           docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:latest .

      - name: Tag and Push to ECR
        run: |
          docker tag ${{ env.ECR_REPOSITORY }}:latest \
            ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Render ECS Task Definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        id: render-task-definition
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy to ECS Service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
